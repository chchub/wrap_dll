#include <windows.h>
#include <stdio.h>
#include "hook_macro.h"

HINSTANCE mHinst = 0, mHinstDLL = 0;

{{ 'extern "C" ' if architecture == 'x64' else '' }}UINT_PTR mProcs[{{ ordinal_and_names|length }}] = {0};

LPCSTR mImportNames[] = {
{% for ordinal, symbol, name in ordinal_and_names %}
{% if name == '[NONAME]' %}
  (LPCSTR){{ ordinal }},
{% else %}
  "{{ name }}",
{% endif %}
{% endfor %}
};

#ifndef _DEBUG
inline void log_info(const char* info) {
}
#else
FILE* debug;
inline void log_info(const char* info) {
  fprintf(debug, "%s\n", info);
  fflush(debug);
}
#endif

#include "{{ hook }}"

inline void _hook_setup() {
{% for ordinal, symbol, name in ordinal_and_names %}
{% if name == '[NONAME]' %}
{% set name = 'ExportByOrdinal' + ordinal|string %}
{% endif %}
#ifdef {{ name | upper }}
  {{ name }}_real = ({{ name }}_ptr)mProcs[{{ loop.index0 }}];
  mProcs[{{ loop.index0 }}] = (UINT_PTR)&{{ name }}_fake;
#endif
{% endfor %}
}

BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) {
  mHinst = hinstDLL;
  if (fdwReason == DLL_PROCESS_ATTACH) {
    mHinstDLL = LoadLibrary("real_{{ dll }}");
    if (!mHinstDLL) {
      return FALSE;
    }
    for (int i = 0; i < {{ ordinal_and_names|length }}; ++i) {
      mProcs[i] = (UINT_PTR)GetProcAddress(mHinstDLL, mImportNames[i]);
    }
    _hook_setup();
#ifdef _DEBUG
    debug = fopen("./debug.log", "a");
#endif
  } else if (fdwReason == DLL_PROCESS_DETACH) {
#ifdef _DEBUG
    fclose(debug);
#endif
    FreeLibrary(mHinstDLL);
  }
  return TRUE;
}

{% for ordinal, symbol, name in ordinal_and_names %}
{% if name == '[NONAME]' %}
{% set wrapper_name = 'ExportByOrdinal' + ordinal|string %}
{% else %}
{% set wrapper_name = name + '_wrapper' %}
{% endif %}
{% if architecture == 'x64' %}
extern "C" void {{ wrapper_name }}();
{% else %}
extern "C" __declspec(naked) void __stdcall {{ wrapper_name }}(){
#ifdef _DEBUG
  log_info("calling {{ name }}");
#endif
  __asm{jmp mProcs[{{ loop.index0 }} * 4]}
}
{% endif %}
{% endfor %}
